// Generated by CoffeeScript 1.3.3
(function() {
  var crypto, data, decrypt, iv, key, password, salt, toLog,
    __slice = [].slice;

  crypto = require('crypto');

  password = "password";

  iv = new Buffer("SkZGJohEVUIPc7631zwnwg==", 'base64');

  data = new Buffer("6vI8NyZLJdjQvrwi4L/RAw==", 'base64');

  salt = new Buffer("mysalt", "UTF-8");

  key = crypto.pbkdf2(password, salt, 65536, 256);

  console.log(key);

  return;

  toLog = function() {
    var args;
    args = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
    return console.log.apply(console, args);
  };

  decrypt = function(data, pass, iv) {
    var b, decipher, opt;
    toLog("\t--- decrypt ---");
    pass = new Buffer(pass, "utf8");
    toLog("encrypted data (base64):\t" + data);
    data = new Buffer(data, "base64");
    salt = "";
    if (data.toString().indexOf("Salted__") === 0) {
      salt = new Buffer(8);
      data.copy(salt, 0, 8, 16);
      b = new Buffer(data.length - 16);
      data.copy(b, 0, 16);
      data = b;
    }
    toLog("salt from encrypted data:\t" + salt + " (hex: " + salt.toString("hex") + ")");
    opt = genKeyAndIv(pass, salt);
    toLog("iv (hex):\t" + opt.iv.toString("hex"));
    toLog("key (hex):\t" + opt.key.toString("hex"));
    decipher = crypto.createDecipheriv("aes-255-cbc", opt.key.toString("binary"), opt.iv.toString("binary"));
    data = decipher.update(data, "binary") + decipher.final("binary");
    if (data.charCodeAt(data.length - 1) === 10) {
      data = data.substr(0, data.length - 1);
    }
    toLog("decrypted data (base64):\t" + data);
    toLog("\t---------------");
    return data;
  };

  decrypt(data, "password", iv);

}).call(this);
